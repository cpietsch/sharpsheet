// https://github.com/cpietsch/sharpsheet v0.1.5 Copyright 2025 Christopher Pietsch
import t from"fs";import e from"sharp";import o from"path";import{glob as i}from"glob";import s from"@mapbox/shelf-pack";async function n(n,p,l){const c=l.border??1,h=l.sheetDimension||1024,m=l.outputFormat||"png",g=l.outputQuality||100,f=l.outputFilename||"spritesheet.json",u=l.compositeChunkSize||100,d=l.sheetBackground||{r:0,g:0,b:0,alpha:0};let w=[],y=[],k=[],b=[];if("string"==typeof n?b=n.startsWith("[")&&n.endsWith("]")?JSON.parse(n.replace(/'/g,'"')):i.sync(n):Array.isArray(n)&&(b=n),!b.length)return void console.error("no images found");const S=function(e){t.existsSync(e)||t.mkdirSync(e,{recursive:!0});return e}(p);console.log("found",b.length,"files"),console.log("loading metadata");for(const t in b){const i=b[t],s=o.parse(i).name;try{const o=await e(i).metadata();w.push({id:+t,w:o.width+2*c,h:o.height+2*c}),y.push(i),k.push(s)}catch(t){console.error(t,i),console.log("skipping file")}}console.log("bin packing"),w.sort(((t,e)=>e.h-t.h));let $=w.map((t=>t)),x=[];for(;0!==$.length;){let t=new s(h,h).pack($);x.push(t),$=$.filter((e=>!t.find((t=>t.id===e.id))))}const F=x.map((t=>t.map((t=>({name:k[t.id],input:y[t.id],left:t.x+c,top:t.y+c,width:t.w-2*c,height:t.h-2*c})))));console.log("creating spritesheets",F.length),await Promise.all(F.map((async(t,o)=>{console.log("composing spritesheet",o);const i={width:h,height:h,channels:4,background:d};let s=await e({create:i}).raw().toBuffer();const n=r(t,u);for(let t of n)console.log("composing sprites",u*o),s=await e(s,{raw:i}).composite(t).raw().toBuffer();const a=`sprite-${h}-${o}.${m}`;return{composite:t,fileName:a,fileMeta:await e(s,{raw:i}).toFormat(m,{quality:g}).toFile(S+"/"+a)}})));const v={meta:{type:"sharpsheet",version:"1",app:"https://github.com/cpietsch/sharpsheet"},spritesheets:F.map(((t,e)=>({image:a(h,e,m),sprites:t.map((({left:t,top:e,width:o,height:i,name:s})=>({name:s,position:{x:t,y:e},dimension:{w:o,h:i}})))})))};t.writeFileSync(S+"/"+f,JSON.stringify(v,null,2))}const r=(t,e)=>Array.from({length:Math.ceil(t.length/e)},((o,i)=>t.slice(i*e,i*e+e))),a=(t,e,o)=>`sprite-${t}-${e}.${o}`;export{n as default};
